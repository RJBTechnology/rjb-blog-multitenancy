-- A separate database for a 4th tenant
-- like the separate schema method, we don't need the Tenant View Filter
-- however, we also don't need unique user crdentials - it's a clean database instance
CREATE SCHEMA RJB_BLOG_MULTITENANCY;

-- a single application 'Product' table
CREATE TABLE RJB_BLOG_MULTITENANCY.PRODUCT  (
   id INT GENERATED BY DEFAULT AS IDENTITY,
   tenant_id VARCHAR(255) DEFAULT 'rjb-blog-mutlitenancy',
   version INT DEFAULT 1 NOT NULL,
   created_user VARCHAR(255) NOT NULL,
   created_timestamp TIMESTAMP NOT NULL,
   updated_user VARCHAR(255) NOT NULL,
   updated_timestamp TIMESTAMP NOT NULL,
   category VARCHAR(255) NOT NULL,
   sku VARCHAR(255) NOT NULL
);
CREATE INDEX RJB_BLOG_MULTITENANCY.IDX_PRODUCT_TENANT_ID ON RJB_BLOG_MULTITENANCY.PRODUCT (sku);
CREATE UNIQUE INDEX RJB_BLOG_MULTITENANCY.IDX_PRODUCT_SKU ON RJB_BLOG_MULTITENANCY.PRODUCT (sku);

CREATE USER "rjb-blog-mutlitenancy" PASSWORD 'rjb-blog-mutlitenancy';

-- grant CRUD access our 'Product' table for the single test user
GRANT SELECT, INSERT, UPDATE, DELETE ON RJB_BLOG_MULTITENANCY.PRODUCT TO "rjb-blog-mutlitenancy";

-- mock Product(s)
INSERT INTO RJB_BLOG_MULTITENANCY.PRODUCT (id, created_user, created_timestamp, updated_user, updated_timestamp, category, sku) 
VALUES (6, 'rjb-multitenancy-blog', CURRENT_TIMESTAMP, 'rjb-multitenancy-blog', CURRENT_TIMESTAMP, 'Test Category', 'SKU-1');