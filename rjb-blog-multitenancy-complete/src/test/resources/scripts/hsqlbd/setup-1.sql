CREATE SCHEMA RJB_BLOG_MULTITENANCY_1;

-- a single application 'Product' table
CREATE TABLE RJB_BLOG_MULTITENANCY_1.PRODUCT  (
   id INT GENERATED BY DEFAULT AS IDENTITY,
   version INT DEFAULT 1 NOT NULL,
   created_user VARCHAR(255) NOT NULL,
   created_timestamp TIMESTAMP NOT NULL,
   updated_user VARCHAR(255) NOT NULL,
   updated_timestamp TIMESTAMP NOT NULL,
   category VARCHAR(255) NOT NULL,
   sku VARCHAR(255) NOT NULL
);
CREATE UNIQUE INDEX RJB_BLOG_MULTITENANCY_1.IDX_PRODUCT_SKU ON RJB_BLOG_MULTITENANCY_1.PRODUCT (sku);

-- create a single test user 
CREATE USER "rjb-blog-mutlitenancy-1" PASSWORD 'rjb-blog-mutlitenancy-1';

-- grant CRUD access our 'Product' table for the single test user
GRANT SELECT, INSERT, UPDATE, DELETE ON RJB_BLOG_MULTITENANCY_1.PRODUCT TO "rjb-blog-mutlitenancy-1";

-- mock Product(s)
INSERT INTO RJB_BLOG_MULTITENANCY_1.PRODUCT (id, created_user, created_timestamp, updated_user, updated_timestamp, category, sku) 
VALUES (1, 'rjb-multitenancy-blog', CURRENT_TIMESTAMP, 'rjb-multitenancy-blog', CURRENT_TIMESTAMP, 'Test Category', 'SKU-1');

INSERT INTO RJB_BLOG_MULTITENANCY_1.PRODUCT (id, created_user, created_timestamp, updated_user, updated_timestamp, category, sku) 
VALUES (2, 'rjb-multitenancy-blog', CURRENT_TIMESTAMP, 'rjb-multitenancy-blog', CURRENT_TIMESTAMP, 'Test Category', 'SKU-2');

INSERT INTO RJB_BLOG_MULTITENANCY_1.PRODUCT (id, created_user, created_timestamp, updated_user, updated_timestamp, category, sku) 
VALUES (3, 'rjb-multitenancy-blog', CURRENT_TIMESTAMP, 'rjb-multitenancy-blog', CURRENT_TIMESTAMP, 'Test Category 2', 'SKU-3');

/*
Implement the Tenant View Filter:
*/

-- 1) Rename the table 
-- use a convention - in this example, we prefix with 'T_'
ALTER TABLE RJB_BLOG_MULTITENANCY_1.PRODUCT RENAME TO T_PRODUCT;

-- 2) Add the tenant id column /w index
-- we need a default value for existing records
-- we use tenant 1
ALTER TABLE RJB_BLOG_MULTITENANCY_1.T_PRODUCT ADD COLUMN tenant_id VARCHAR(255) DEFAULT 'rjb-blog-mutlitenancy-1';
CREATE INDEX RJB_BLOG_MULTITENANCY_1.IDX_T_PRODUCT_TENANT_ID ON RJB_BLOG_MULTITENANCY_1.T_PRODUCT (tenant_id);

-- 3) Verify existing indexes. Unique indexes on non-generated fields must be adjusted to include the tenant id.
-- In this case, we adjust the sku index.
DROP INDEX RJB_BLOG_MULTITENANCY_1.IDX_PRODUCT_SKU;
CREATE UNIQUE INDEX RJB_BLOG_MULTITENANCY_1.IDX_PRODUCT_SKU ON RJB_BLOG_MULTITENANCY_1.T_PRODUCT (tenant_id, sku);

-- 4) Create the filtered view with the original table name
CREATE VIEW RJB_BLOG_MULTITENANCY_1.PRODUCT AS 
SELECT * FROM RJB_BLOG_MULTITENANCY_1.T_PRODUCT t
WHERE t.tenant_id IS NULL
OR t.tenant_id = CURRENT_USER;

-- 5) grant CRUD access to our 'Product' VIEW for the original test user
-- NOTE: the user cannot access the table.
GRANT SELECT, INSERT, UPDATE, DELETE ON RJB_BLOG_MULTITENANCY_1.PRODUCT TO "rjb-blog-mutlitenancy-1";

/*
Our Tenant View Filter is complete.
Existing queries - if performed on a correctly configured connection - will work as expected.
Execute ProductDaoTest now, to verify this.
*/

-- mock Product(s) for tenant 2
INSERT INTO RJB_BLOG_MULTITENANCY_1.PRODUCT (id, tenant_id, created_user, created_timestamp, updated_user, updated_timestamp, category, sku) 
VALUES (4, 'rjb-blog-mutlitenancy-2', 'rjb-multitenancy-blog', CURRENT_TIMESTAMP, 'rjb-multitenancy-blog', CURRENT_TIMESTAMP, 'Test Category', 'SKU-2');

-- create a second user for tenant 2
CREATE USER "rjb-blog-mutlitenancy-2" PASSWORD 'rjb-blog-mutlitenancy-2';

-- grant CRUD access to our 'Product' VIEW for tenant 2
GRANT SELECT, INSERT, UPDATE, DELETE ON RJB_BLOG_MULTITENANCY_1.PRODUCT TO "rjb-blog-mutlitenancy-2";